/* Make side bar available under Adds-on drop down list when spreadsheet is being opened */
function onOpen() {
  SpreadsheetApp.getUi() 
      .createAddonMenu() 
      .addItem('Show sidebar', 'showSidebar')
      .addToUi();
} //onOpen()

function showSidebar() {
  var ui = HtmlService.createHtmlOutputFromFile('Sidebar')
           .setTitle('Automatic Reminder')
           .setWidth(300)
      .setSandboxMode(HtmlService.SandboxMode.IFRAME);
  SpreadsheetApp.getUi().showSidebar(ui);
} // showSidebar()

/* Client-server interaction with Sidebar.html */
function doGet() {
  return HtmlService.createHtmlOutputFromFile('Sidebar');
} // doGet()

/* Get user input from side bar and invoke reminder trigger */
function getUserInput(form) {
  
  // Get user input from HTML side bar
  var eventDate = (form.dateTxt).replace('/','-');
  var hr = form.startTimeTxt;
  var min = "00";
  var time = new Date(); 
  var eventDateTime;
  var finalTime = 0;
  
  // Code modified from https://ctrlq.org/code/19716-schedule-gmail-emails
  PropertiesService.getScriptProperties().setProperty('title', form.eventName);
  Utilities.sleep(1000);
  
  // Format hr and min
  if (hr.substring(1,2) == ':') { // if hr is only 1 digit, add leading 0
    hr = '0' + hr;
    min = hr.substring(hr.length-2,hr.length);
    if (min.substring(0,1) == ':') { // if min is only 1 digit, add leading 0
      min = '0' + min.substring(1,2);
     }
     hr = hr.substring(0,2);
  } else if(hr.substring(2,3) == ':') { // if hr >= 10
    min = hr.substring(hr.length-2,hr.length);
    if (min.substring(0,1) == ':') { // if min is only 1 digit, add leading 0
      min = '0' + min.substring(1,2);
    }
    hr = hr.substring(0,2);
  } else {
    if (Number(hr) < 10) {
      hr = '0' + hr;
    }
  }

  // Check to see if event occur during this year or next year
  if (Number(time.getMonth()) > Number(eventDate.split('-')[0])){
    eventDateTime = new Date(getPrevDate((Number(time.getYear()) + 1) + '-' + eventDate + 'T' + hr + ":" + min + ':00-08:00'));
    PropertiesService.getScriptProperties().setProperty('sentTime', getPrevDate((Number(time.getYear()) + 1) + '-' + eventDate + 'T' + hr + ":" + min + ':00-08:00'));
  }
  else {
    eventDateTime = new Date(getPrevDate(time.getYear() + '-' + eventDate + 'T' + hr + ":" + min + ':00-08:00'));
    PropertiesService.getScriptProperties().setProperty('sentTime', getPrevDate(time.getYear() + '-' + eventDate + 'T' + hr + ":" + min + ':00-08:00'));
  }
  
  // Check if event date is within 24 hours for now
  if (eventDateTime.getTime() < time.getTime()) {
    finalTime = time;
  } else {
    finalTime = eventDateTime;
  }
  
  // Delete all existing triggers expect onOpen trigger
  var triggers = ScriptApp.getProjectTriggers();
  for (var i = 0; i < triggers.length; i++) {
    if ((triggers[i].getHandlerFunction() === "sendMail") && (triggers[i].getEventType() != ScriptApp.EventType.ON_OPEN)) {
      Logger.log('Delete trigger');
      Utilities.sleep(1000);
      ScriptApp.deleteTrigger(triggers[i]);
    }
  }
  
  // Set up time to send email
  ScriptApp.newTrigger("sendMail")
  .timeBased()
  .at(finalTime)
  .inTimezone(SpreadsheetApp.getActiveSpreadsheet().getSpreadsheetTimeZone())
  .create();

  PropertiesService.getScriptProperties().setProperty('eventName', form.eventName);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('eventDate', eventDate);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('startTime', form.startTimeTxt);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('endTime', form.endTimeTxt);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('eventLoc', form.locTxt);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('nameUse', form.nameCk);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('emailCol', form.emailCol);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('offName', form.offName);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('offPhone', form.offPhone);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('offEmail', form.offEmail);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('senderEmail', form.sendEmail);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('msg', form.msg);
  Utilities.sleep(1000);
  PropertiesService.getScriptProperties().setProperty('logReport', form.logRep);
  Utilities.sleep(1000);
  Logger.log('email scheduled at ' + finalTime + ' for ' + eventDate.replace('-','/') + ' ' + form.eventName);
  return;
}

/*
 * Send email when it reaches time stored in trigger
 */
function sendMail() {
  Logger.log('sendMail');
  var spreadSheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var data = spreadSheet.getDataRange().getValues();
  var time = new Date(); // Get current time
  var schedule = new Date(convertToDate(PropertiesService.getScriptProperties().getProperty('sentTime'))); // Format date time
  var eventDate;
  var subject;
  var name;
  var email;
  var iName;
  var jName;
  var iEmail;
  var jEmail;
  var i;
  var j;
  var offset;

  // Create subject line for email
  subject = 'Reminder for ' + PropertiesService.getScriptProperties().getProperty('eventName') + ' on ' + 
            PropertiesService.getScriptProperties().getProperty('eventDate').replace('-','/'); ;
  
  // Find cell address for "Name"
  
  if ((PropertiesService.getScriptProperties().getProperty('nameUse')) == "on") {
    nestedName:for (i = 0; i < data.length; i++) {
      for (j = 0; j < data[i].length; j++) {
          if (data[i][j] == "Name") {
            iName = i;
            jName = j;
            break nestedName;
          } // if
      } // for
    } // nestedName
  } else {
    iName = undefined;
    jName = undefined;
  }// if == "on"
  
  // Find cell address for "Phone"
  Logger.log(PropertiesService.getScriptProperties().getProperty('emailCol'));
  if ((PropertiesService.getScriptProperties().getProperty('emailCol')) == "on") {
    nestedEmail:for (i = 0; i < data.length; i++) {
      for (j = 0; j < data[i].length; j++) {
          if (data[i][j] == "Email") {
            iEmail = i;
            jEmail = j;
            break nestedEmail;
          } // if
      } // for
    } // nestedEmail
  } else {
    iEmail = undefined;
    jEmail = undefined;
  }
 
  // Get participants' name and email
  offset = 1;
  while (offset != data.length && data[iEmail + offset][jEmail] != '') {
    if (iName == undefined) {
      name = "";
    } else {
      name = data[iName + offset][jName];
    } // if
    
    email = data[iEmail + offset][jEmail];
    generateEmail (email, subject, name, PropertiesService.getScriptProperties().getProperty('eventName'),
                   PropertiesService.getScriptProperties().getProperty('eventDate'), PropertiesService.getScriptProperties().getProperty('startTime'),
                   PropertiesService.getScriptProperties().getProperty('endTime'),PropertiesService.getScriptProperties().getProperty('eventLoc'),
                   PropertiesService.getScriptProperties().getProperty('offName'),PropertiesService.getScriptProperties().getProperty('offPhone'),
                   PropertiesService.getScriptProperties().getProperty('offEmail'),PropertiesService.getScriptProperties().getProperty('senderEmail'),
                  PropertiesService.getScriptProperties().getProperty('msg'));
     offset++;
  } // while
  
  // Send log reports to creator
  if (PropertiesService.getScriptProperties().getProperty('logReport') == "on") {
    GmailApp.sendEmail(PropertiesService.getScriptProperties().getProperty('senderEmail'), 'Logger Report for ' + PropertiesService.getScriptProperties().getProperty('eventName'), Logger.getLog());
  }
}

function generateEmail(email, subject, name, eventName, eventDate, startTime, endTime, eventLoc, officerName, officerCell, officerEmail, senderEmail, msg) {
  // Replace message content with recipient's information
  if (name != undefined) {
    msg = msg.replace("(participant's name)", name);
  }
  if (eventName != undefined) {
    msg = msg.replace("(event name)", eventName);
  }
  if (eventDate != undefined) {
    msg = msg.replace("(event date)", eventDate.replace('-','/'));
  }
  if (eventLoc != undefined) {
    msg = msg.replace("(event location)", eventLoc);
  }
  if (startTime != undefined) {
    msg = msg.replace("(start time)", startTime);
  }
  if (endTime != undefined) {
    msg = msg.replace("(end time)", endTime);
  }
  if (officerName != undefined) {
    msg = msg.replace("(officer's name)", officerName);
  }
  if (officerCell != undefined) {
    msg = msg.replace("(officer's cell)", officerCell);
  }
  if (officerEmail != undefined) {
    msg = msg.replace("(officer's email)", officerEmail);
  }
  Logger.log(msg);
  // Send email
  GmailApp.sendEmail(email, subject, msg);
  Logger.log('Sent email to ' + email + ' for ' + eventName);
}


/* 
 * Set date and time format to fit in the format of Google Date()
 * Get date and time 24 hours before the event
 * Modified from http://delete.me.uk/2005/03/iso8601.html
 */
function getPrevDate(string) {
  //2017-10-30T13:00:00-08:00
  try{
    var aDate = new Date();
    var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +
        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\\.([0-9]+))?)?" +
        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
    var d = string.match(new RegExp(regexp));

    var offset = 0;
    var date = new Date(d[1], 0, 1);

    if (d[3]) { date.setMonth(d[3] - 1); }
    if (d[5]) { date.setDate(d[5]-1); } // Get 1 day before
    if (d[7]) { date.setHours(d[7]); }
    if (d[8]) { date.setMinutes(d[8]); }
    if (d[10]) { date.setSeconds(d[10]); }
    if (d[12]) { date.setMilliseconds(Number("0." + d[12]) * 1000); }
    if (d[14]) {
      offset = (Number(d[16]) * 60) + Number(d[17]);
      offset *= ((d[15] == '-') ? 1 : -1);
    }

    offset -= date.getTimezoneOffset();
    time = (Number(date) + (offset * 60 * 1000));
    return aDate.setTime(Number(time));
  } catch(e){
    return;
  }
}

/*
 * Set date and time format to fit in the format of Google Date()
 * Copied from http://delete.me.uk/2005/03/iso8601.html
 */
function convertToDate(string) {
  //2017-10-30T13:00:00-08:00
  try{
    var aDate = new Date();
    var regexp = "([0-9]{4})(-([0-9]{2})(-([0-9]{2})" +
        "(T([0-9]{2}):([0-9]{2})(:([0-9]{2})(\\.([0-9]+))?)?" +
        "(Z|(([-+])([0-9]{2}):([0-9]{2})))?)?)?)?";
    var d = string.match(new RegExp(regexp));

    var offset = 0;
    var date = new Date(d[1], 0, 1);

    if (d[3]) { date.setMonth(d[3] - 1); }
    if (d[5]) { date.setDate(d[5]); }
    if (d[7]) { date.setHours(d[7]); }
    if (d[8]) { date.setMinutes(d[8]); }
    if (d[10]) { date.setSeconds(d[10]); }
    if (d[12]) { date.setMilliseconds(Number("0." + d[12]) * 1000); }
    if (d[14]) {
      offset = (Number(d[16]) * 60) + Number(d[17]);
      offset *= ((d[15] == '-') ? 1 : -1);
    }

    offset -= date.getTimezoneOffset();
    time = (Number(date) + (offset * 60 * 1000));
    return aDate.setTime(Number(time));
  } catch(e){
    return;
  }
}
